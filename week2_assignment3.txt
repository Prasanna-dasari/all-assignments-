1.work on assignment operators?
Operator   Example	      Same As
=	  x = 5	              x = 5	
+=	x += 3	              x = x + 3	
-=	x -= 3         	      x = x - 3	
*=	x *= 3	              x = x * 3	
/=	x /= 3	              x = x / 3	
%=	x %= 3	              x = x % 3	
//=	x //= 3	              x = x // 3	
**=	x **= 3	              x = x ** 3	
&=	x &= 3	              x = x & 3	
|=	x |= 3	              x = x | 3	
^=	x ^= 3	              x = x ^ 3	
>>=	x >>= 3	              x = x >> 3	
<<=	x <<= 3	              x = x << 3
2.work on comparision operators?
Operator	Name	                       Example	
==	     Equal	                        x == y	
!=	     Not equal	                        x != y	
>	     Greater than	                x > y	
<	     Less than	                        x < y	
>=	     Greater than or equal to	        x >= y	
<=	     Less than or equal to	        x <= y
3.work on operators?
Bitwise Operator:
1.& 	AND	                 Sets each bit to 1 if both bits are 1
2.|	OR	                 Sets each bit to 1 if one of two bits is 1
3. ^	XOR	                 Sets each bit to 1 if only one of two bits is 1
4.~ 	NOT	                 Inverts all the bits
5.<<	Zero fill left shift     Shift left by pushing zeros in from
                                  the right and let the leftmost bits fall off
6.>>	Signed right shift	Shift right by pushing copies of the leftmost 
                                bit in from the left, and let the rightmost bits 
                                fall offrship Operators
Membership operators:
in 	-------        x in y	
 
not in	-------        x not in y

4.write aprogram on prime numbers without using loops?
for num in range(2,50):
    prime = True
    for i in range(2,num):
        if (num%i==0):
            prime = False
    if prime:
       print (num)

5.Work on dictionary and tuple?
Dictionary:
A dictionary is a collection which is unordered, changeable and indexed. 
In Python dictionaries are written with curly brackets, and they have keys and values.
example:
thisdict = {
  "brand": "redmi",
  "model": "note 5 pro",
  "year": "2018"
}
print(thisdict)

Tuple:A tuple is a collection which is ordered and unchangeable. 
In Python tuples are written with round brackets.
example:
thistuple = ("apple", "banana", "cherry")
print(thistuple)

6.python modules?
i. Random Module:
python has a built-in module that you can use to make random numbers.
The random module has a set of methods:

Method	        Description
seed()	        Initialize the random number generator
getstate()	Returns the current internal state of the random number generator
setstate()	Restores the internal state of the random number generator
getrandbits()	Returns a number representing the random bits
randrange()	Returns a random number between the given range
randint()	Returns a random number between the given range
choice()	Returns a random element from the given sequence
choices()	Returns a list with a random selection from the given sequence
shuffle()	Takes a sequence and returns the sequence in a random order
sample()	Returns a given sample of a sequence
random()	Returns a random float number between 0 and 1
uniform()	Returns a random float number between two given parameters
triangular()	
betavariate()	

ii. Requests Module:
The requests module allows you to send HTTP requests using Python.
The HTTP request returns a Response Object with all the response data (content, encoding, status, etc).

iii. math Module:
ython has a built-in module that you can use for mathematical tasks.

The math module has a set of methods and constants.

Math Methods
Method	Description
math.acos(x)	Returns the arc cosine value of x
math.acosh(x)	Returns the hyperbolic arc cosine of x
math.asin(x)	Returns the arc sine of x
math.asinh(x)	Returns the hyperbolic arc sine of x
math.atan(x)	Returns the arc tangent value of x
math.atan2(y, x)	Returns the arc tangent of y/x in radians
math.atanh(x)	Returns the hyperbolic arctangent value of x
math.ceil(x)	Rounds a number upwards to the nearest integer, and returns the result
math.comb(n, k)	Returns the number of ways to choose k items from n items without repetition and order
math.copysign(x, y)	Returns a float consisting of the value of the first parameter and the sign of the second parameter
math.cos(x)	Returns the cosine of x
math.cosh(x)	Returns the hyperbolic cosine of x
math.degrees(x)	Converts an angle from radians to degrees
math.dist(p, q)	Calculates the euclidean distance between two specified points (p and q), where p and q are the coordinates of that point
math.erf(x)	Returns the error function of x
math.erfc(x)	Returns the complementary error function of x
math.exp(x)	Returns the value of Ex, where E is Euler's number (approximately 2.718281...), and x is the number passed to it
math.expm1(x)	Returns the value of Ex - 1, where E is Euler's number (approximately 2.718281...), and x is the number passed to it
math.fabs(x)	Returns the absolute value of a number
math.factorial()	Returns the factorial of a number
math.floor(x)	Rounds a number downwards to the nearest integer, and returns the result
math.fmod(x, y)	Returns the remainder of specified numbers when a number is divided by another number
math.frexp()	Returns the mantissa and the exponent, of a specified value
math.fsum(iterable)	Returns the sum of all items in an iterable (tuples, arrays, lists, etc.)
math.gamma(x)	Returns the gamma value of x
math.gcd()	Returns the highest value that can divide two integers
math.hypot()	Find the Euclidean distance from the origin for n inputs
math.isclose()	
math.isfinite(x)	
math.isinf(x)	
math.isnan(x)	
math.isqrt(n)	
math.ldexp(x, i)
math.lgamma(x)	
math.log(x, base)	
math.log10(x)	
math.log1p(x)	
math.log2(x)
math.perm(n, k)	
math.pow(x, y)	
math.prod(iterable, *, start=1)	
math.radians(x)	
math.remainder(x, y)	
math.sin(x)	
math.sinh(x)	
math.sqrt(x)	
math.tan(x)	
math.tanh(x)	
math.trunc(x)

iv. cmath Module:
Python has a built-in module that you can use for mathematical tasks for complex numbers.
The methods in this module accepts int, float, and complex numbers. 
It even accepts Python objects that has a __complex__() or __float__() method.
The methods in this module almost always return a complex number. 
If the return value can be expressed as a real number, the return value has an imaginary part of 0.
The cmath module has a set of methods and constants.

cMath Methods:

Method	        Description
cmath.acos(x)	Returns the arc cosine value of x
cmath.acosh(x)	Returns the hyperbolic arc cosine of x
cmath.asin(x)	Returns the arc sine of x
cmath.asinh(x)	Returns the hyperbolic arc sine of x
cmath.atan(x)	Returns the arc tangent value of x
cmath.atanh(x)	Returns the hyperbolic arctangent value of x
cmath.cos(x)	Returns the cosine of x
cmath.cosh(x)	Returns the hyperbolic cosine of x
cmath.exp(x)

cMath Constants:

Constant	Description
cmath.e	Returns Euler's number (2.7182...)
cmath.inf	Returns a floating-point positive infinity value
cmath.infj	Returns a complex infinity value
cmath.nan	Returns floating-point NaN (Not a Number) value
cmath.nanj	Returns coplext NaN (Not a Number) value
cmath.pi	Returns PI (3.1415...)
cmath.tau	Returns tau (6.2831...)

